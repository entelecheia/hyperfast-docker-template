# Sets the base image for subsequent instructions
ARG ARG_BUILD_FROM="`{{ docker_build_from }}`"
FROM $ARG_BUILD_FROM AS builder

# Sets labels for the image
LABEL org.opencontainers.image.source="https://github.com/`{{ github_username }}`/`{{ github_repo_name }}`"
LABEL org.opencontainers.image.description="`{{ project_short_description }}`"
LABEL org.opencontainers.image.licenses="`{{ project_license }}`"

# Setting this argument prevents interactive prompts during the build process
ARG DEBIAN_FRONTEND=noninteractive
# Updates the image and installs necessary packages
RUN apt-get update --fix-missing \
    && apt-get install -y curl wget jq sudo gosu git build-essential \
    locales locales-all {% if copy_scripts_dir -%}`{{ docker_apt_packages }}` {%- endif %}\
    tzdata {% if use_ssh_service %}openssh-server{% endif %} \
    # Cleans up unnecessary packages to reduce image size
    && apt-get autoremove -y \
    && apt-get clean -y

# Sets Python environment variables
ENV PIP_DEFAULT_TIMEOUT 100
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Setting ARGs and ENVs for the app
ARG ARG_APP_INSTALL_ROOT="`{{ app_install_root }}`"
ARG ARG_APP_DIRNAME="`{{ app_dirname }}`"
ENV APP_INSTALL_ROOT $ARG_APP_INSTALL_ROOT
ENV APP_DIRNAME $ARG_APP_DIRNAME
ENV APP_SRC_DIR=${APP_INSTALL_ROOT}/${APP_DIRNAME}
ENV APP_VIRTUAL_ENV=${APP_INSTALL_ROOT}/.venvs/${APP_DIRNAME}
ENV PATH="$APP_VIRTUAL_ENV/bin:$PATH"
ENV APP_WORKSPACE_ROOT=${APP_INSTALL_ROOT}/workspace
ARG ARG_WORKSPACE_ROOT="/workspace"
ENV WORKSPACE_ROOT $ARG_WORKSPACE_ROOT
# Sets up the workspace for the user
RUN mkdir -p $WORKSPACE_ROOT/projects

# Sets the working directory to workspace root
WORKDIR $WORKSPACE_ROOT
{% if copy_scripts_dir -%}
# Copies scripts from host into the image
COPY ./.docker/scripts/ ./scripts/
# RUN pip install -r ./scripts/requirements-`{{ docker_image_variant_name }}`.txt
{%- endif %}

# Sets the time zone within the container
ENV TZ="`{{ docker_timezone }}`"
# Sets up the locale to en_US.UTF-8
RUN localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true

# Setting ARGs and ENVs for user creation and workspace setup
ARG ARG_USERNAME="`{{ docker_container_username }}`"
ARG ARG_USER_UID=`{{ docker_container_uid }}`
ARG ARG_USER_GID=$ARG_USER_UID
ENV USERNAME $ARG_USERNAME
ENV USER_UID $ARG_USER_UID
ENV USER_GID $ARG_USER_GID

# Creates a non-root user with sudo privileges
RUN groupadd --gid $USER_GID $USERNAME \
    && adduser --uid $USER_UID --gid $USER_GID --force-badname --disabled-password --gecos "" $USERNAME  \
    && echo "$USERNAME:$USERNAME" | chpasswd \
    && adduser $USERNAME sudo \
    && echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers \
    && echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

{% if install_dotfiles -%}
# Fixes sudo error related to core dumps
RUN echo "Set disable_coredump false" > /etc/sudo.conf

# Switches to the newly created user
USER $USERNAME

# install dotfiles
ARG ARG_USER_FULLNAME="Dev User"
ARG ARG_USER_EMAIL="dev@domain.com"
ARG ARG_GITHUB_USERNAME=""
ARG ARG_SYSTEM_HOSTNAME="dev-container"
ARG ARG_WORKSPACE_LOCATION="/"
ENV USER_FULLNAME $ARG_USER_FULLNAME
ENV USER_EMAIL $ARG_USER_EMAIL
ENV GITHUB_USERNAME $ARG_GITHUB_USERNAME
ENV SYSTEM_HOSTNAME $ARG_SYSTEM_HOSTNAME
ENV WORKSPACE_LOCATION $ARG_WORKSPACE_LOCATION

ENV DOTFILES_APPLY_ROOTMOI=0
ENV DOTFILES_USE_CODE=1
ENV DOTFILES_USE_PYTHON_TOOLS=1
ENV REMOTE_CONTAINERS=1
# ENV DOTFILES_DEBUG=1

USER $USERNAME
RUN sh -c "$(wget -qO- https://dotfiles.entelecheia.ai/install)"

{%- endif %}

USER root
RUN chown --recursive "${USER_UID}:${USER_GID}" "${WORKSPACE_ROOT}"
RUN chown --recursive "${USER_UID}:${USER_GID}" "${APP_INSTALL_ROOT}"
USER $USERNAME

# Specifies the command that will be executed when the container is run
CMD ["bash"]
